clear all 
clc
%%
% clear cam;
cam = webcam(2);
cam.Resolution = '640x480';
inputSize = [224 224 3];
YOLO_Object_Classifier = load('resnet50_6.mat');
bboxAreaThreshold = 1000;
%%
for  i = 1:10000
    img = snapshot(cam);
    size(img);
    
    img = imresize(img,inputSize(1:2));
    [bboxes,scores] = detect(YOLO_Object_Classifier.detector,img);
    
    % filter by selecting the strongest bounding box in the case of
    % overlapping ones
    
    [bboxes,scores] = selectStrongestBbox(bboxes,scores,'OverlapThreshold',0.2);
    bboxAreas = bboxes(:,3) .* bboxes(:,4);
    invalidAreaArray = bboxAreas < bboxAreaThreshold;  
    indicesToRemove = find(invalidAreaArray);
    
    bboxes(indicesToRemove,:) = [];
    scores(indicesToRemove,:) = [];
    
    xLeftTop = bboxes(:,1)   + (bboxes(:,3)/2) ;
    yLeftBottom = bboxes(:,2)  + (bboxes(:,4)/2);
    
    % plot the initial annotations
    if (~isempty(bboxes) && (length(bboxes)>0))
        img = insertObjectAnnotation(img,'rectangle',bboxes,scores); 
    end
    % display image and any centroids if there are any
    imshow(img);
    
    
    
    if length(xLeftTop) > 0 
        hold on;
        plot(xLeftTop , yLeftBottom  , 'r*', 'LineWidth', 1, 'MarkerSize', 2);
    end 
    %hold on;
    
    
end 
%% 
clear cam;

%% Supporting Functions
% arguments: 
% the vector from camera to the robot reference frame origin, P_c_r,
% the vector from camera frame to the target P_c_t
% angle array: theta, psi, phi, in angles
% outputs:
% 3x1 vector describing targets position in robot reference frame, P_r_t

function P_r_t = mapForRobotPose(P_c_r,theta,phi,psi,P_c_t)

pixelToInches = 1/0.1497;

Rx = rotx(theta);
Ry = roty(phi);
Rz = rotz(psi);

% roatation from camera to robot
R_c_r = rotx * roty * rotz;
T_c_r = [ 0, 0, 0, 0; 
          0, 0, 0, 0;
          0, 0, 0, 0;
          0, 0, 0, 1 ];
      
T_c_r(1:3,1:3) = R_c_r;
T_c_r(1:3,4) = P_c_r; 

P_r_t = T_c_r * P_c_t;

end
    